<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>obj_global.time_of_day = 12

global.zoom = 1
zoom_dest = 1

global.view_width = 1024
global.view_height = 768
global.view_x_cent = 200
global.view_y_cent = 200

resize_view(global.view_height)

//unit control
obj_global.unit_selected = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///variable control and camera movement
obj_global.time_of_day += 0.5/room_speed // (one hour every 5 seconds)
if obj_global.time_of_day &gt;= 24{
    obj_global.time_of_day = 0
}

//reset obj_global.unit_selected to 0 each step to refresh
obj_global.unit_selected = 0

//mouse control
var distance_from_edge = 130
var sensitivity = 4

if point_distance(global.view_x_cent,mouse_y,mouse_x,mouse_y) &gt; view_wview[0]/2-distance_from_edge{
    
    if mouse_x &gt; global.view_x_cent{
        global.view_x_cent += point_distance(view_xview[0]+view_wview[0]-distance_from_edge,mouse_y,mouse_x,mouse_y) / sensitivity
    }
    
    if mouse_x &lt; global.view_x_cent{
        global.view_x_cent -= point_distance(view_xview[0]+distance_from_edge,mouse_y,mouse_x,mouse_y) / sensitivity
    }
}

if point_distance(mouse_x,global.view_y_cent,mouse_x,mouse_y) &gt; view_hview[0]/2-distance_from_edge{
    
    if mouse_y &gt; global.view_y_cent{
        global.view_y_cent += point_distance(mouse_x,view_yview[0]+view_hview[0]-distance_from_edge,mouse_x,mouse_y) / sensitivity
    }
    
    if mouse_y &lt; global.view_y_cent{
        global.view_y_cent -= point_distance(mouse_x,view_yview[0]+distance_from_edge,mouse_x,mouse_y) / sensitivity
    }
}

//camera zoom
if mouse_wheel_up(){
    zoom_dest-=0.7
}

if mouse_wheel_down(){
    zoom_dest+=0.7
}

zoom_dest = clamp(zoom_dest,0.6,3)

if global.zoom &lt; zoom_dest{
    global.zoom += (zoom_dest - global.zoom)/6
}

if global.zoom &gt; zoom_dest{
    global.zoom -= (global.zoom - zoom_dest)/6
}

global.zoom = clamp(global.zoom,0.6,3)


view_wview[0] = global.view_width*global.zoom
view_hview[0] = global.view_height*global.zoom


//clamp the view
global.view_x_cent = clamp(global.view_x_cent,view_wview[0]/2,room_width-view_wview[0]/2)
global.view_y_cent = clamp(global.view_y_cent,view_hview[0]/2,room_height-view_hview[0]/2)

//center the view
view_xview[0] = global.view_x_cent -view_wview[0]/2
view_yview[0] = global.view_y_cent -view_hview[0]/2




</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="72">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw circle around road point if selected is true and mouse is near
if obj_global.unit_selected = 1{
    var road_near = road_get_nearest_roadnum(mouse_x,mouse_y)
    var point_near = road_get_nearest_pointid(road_near,mouse_x,mouse_y) 
    if point_distance( mouse_x, mouse_y, obj_global.roadpointx[road_near,point_near], obj_global.roadpointy[road_near,point_near]) &lt;50{
        
        draw_set_alpha(0.3)
        draw_set_colour(c_yellow)
        draw_circle(obj_global.roadpointx[road_near,point_near],obj_global.roadpointy[road_near,point_near],50,0)
        draw_set_alpha(1)
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="32">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>resize_view(768)
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
