<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_road_point</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-3</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>selected = 0
x_dest = x
y_dest = y

cspeed = 3

on_road = 0
road_dest = -1
road_dest_point = -1
road_total_destinations = 0

road_point_next = -1
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//selection and movement

//set obj_global.unit_selected to 1 each step to refresh
if selected = 1{
    obj_global.unit_selected = 1
}

//select/deselect unit
if mouse_check_button_pressed(mb_left){
    if selected = 1{
        selected = 0
    }
    if mouse_x &gt; x -20 &amp;&amp; mouse_x &lt; x +20{
        if mouse_y &gt;y -20 &amp;&amp; mouse_y &lt; y +20{
        
            if selected = 0{
                selected = 1
            }
            else{
                selected = 0
            }
        }
    }
}

if selected = 1{
    if mouse_check_button_released(mb_right){
        //if not on road just move to mouse point
        if on_road = 0{
            x_dest = mouse_x
            y_dest = mouse_y
        }
        
        //if mouse near road vertex snap to the road
        if on_road = 0{
            var road_near = road_get_nearest_roadnum(mouse_x,mouse_y)
            var point_near = road_get_nearest_pointid(road_near,mouse_x,mouse_y) 
            if point_distance( mouse_x, mouse_y, obj_global.roadpointx[road_near,point_near], obj_global.roadpointy[road_near,point_near]) &lt;50{
                
                on_road = 1
                road_dest = road_near
                road_dest_point = point_near
                road_point_next = road_dest_point
                x_dest = obj_global.roadpointx[road_dest,road_dest_point]
                y_dest = obj_global.roadpointy[road_dest,road_dest_point]
            }
        }
        
        if on_road = 1{
            var road_near = road_get_nearest_roadnum(mouse_x,mouse_y)
            var point_near = road_get_nearest_pointid(road_near,mouse_x,mouse_y) 
            if point_distance( mouse_x, mouse_y, obj_global.roadpointx[road_near,point_near], obj_global.roadpointy[road_near,point_near]) &lt;50{
                
                on_road = 1
                if road_dest != road_near{
                    //road_point_next = point_near
                    //road_dest = road_near
                    //road_dest_point = point_near
                    path_finder = instance_create(x,y,obj_path_finder)
                }
                else{
                    road_dest = road_near
                    road_dest_point = point_near
                }
                
                //set next point to move to
                if road_dest_point &gt; road_point_next{
                    road_point_next += 1
                }
                if road_dest_point &lt; road_point_next{
                    road_point_next -= 1
                }
                x_dest = obj_global.roadpointx[road_dest,road_point_next]
                y_dest = obj_global.roadpointy[road_dest,road_point_next]
            }
        }
        
    }
}


if point_distance(x,y,x_dest,y_dest)&lt;5{
    if on_road = 1{
        if road_dest_point &gt; road_point_next{
            road_point_next += 1
        }
        if road_dest_point &lt; road_point_next{
            road_point_next -= 1
        }
        x_dest = obj_global.roadpointx[road_dest,road_point_next]
        y_dest = obj_global.roadpointy[road_dest,road_point_next]
    }
}
else{
    var point_dir = point_direction(x,y,x_dest,y_dest);
    x += lengthdir_x(cspeed,point_dir)
    y += lengthdir_y(cspeed,point_dir)
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>8,8</point>
    <point>8,8</point>
  </PhysicsShapePoints>
</object>
